// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package controller

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Age          int     `json:"age"`
	Email        string  `json:"email"`
	Gender       *string `json:"gender,omitempty"`
	Image        *string `json:"image,omitempty"`
	InKitakyushu bool    `json:"in_kitakyushu"`
	Nickname     string  `json:"nickname"`
	Password     string  `json:"password"`
}

// GetArticleResponse defines model for GetArticleResponse.
type GetArticleResponse struct {
	Category    *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Image       *string `json:"image,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// GetUsersResponse defines model for GetUsersResponse.
type GetUsersResponse struct {
	Age          *int    `json:"age,omitempty"`
	Email        *string `json:"email,omitempty"`
	Gender       *string `json:"gender,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Image        *string `json:"image,omitempty"`
	InKitakyushu *bool   `json:"in_kitakyushu,omitempty"`
	Nickname     *string `json:"nickname,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// ArticleId defines model for articleId.
type ArticleId = int

// UserId defines model for userId.
type UserId = int

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = CreateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/articles)
	GetArticles(c *gin.Context)

	// (GET /api/v1/articles/{article_id})
	GetArticle(c *gin.Context, articleId ArticleId)

	// (GET /api/v1/users)
	GetUsers(c *gin.Context)

	// (GET /api/v1/users/me)
	GetMe(c *gin.Context)

	// (GET /api/v1/users/{user_id})
	GetUser(c *gin.Context, userId UserId)

	// (POST /auth/v1/login)
	Login(c *gin.Context)

	// (POST /auth/v1/logout)
	Logout(c *gin.Context)

	// (POST /auth/v1/register)
	Register(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticles(c)
}

// GetArticle operation middleware
func (siw *ServerInterfaceWrapper) GetArticle(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId ArticleId

	err = runtime.BindStyledParameterWithOptions("simple", "article_id", c.Param("article_id"), &articleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticle(c, articleId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Register(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/articles", wrapper.GetArticles)
	router.GET(options.BaseURL+"/api/v1/articles/:article_id", wrapper.GetArticle)
	router.GET(options.BaseURL+"/api/v1/users", wrapper.GetUsers)
	router.GET(options.BaseURL+"/api/v1/users/me", wrapper.GetMe)
	router.GET(options.BaseURL+"/api/v1/users/:user_id", wrapper.GetUser)
	router.POST(options.BaseURL+"/auth/v1/login", wrapper.Login)
	router.POST(options.BaseURL+"/auth/v1/logout", wrapper.Logout)
	router.POST(options.BaseURL+"/auth/v1/register", wrapper.Register)
}
